// Import Libraries

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
//import Calcultor Package
import Calculator.Calculator;


class Methods implements Calculator {

    @Override
    public double add(double num1, double num2) {
        return num1 + num2;
    }

    @Override
    public double subtract(double num1, double num2) {
        return num1 - num2;
    }

    @Override
    public double multiply(double num1, double num2) {
        return num1 * num2;
    }

    @Override
    public double divide(double num1, double num2) {
        if (num2 == 0) {
            throw new ArithmeticException("Division by zero is not allowed");

        }
        else {
            return num1 / num2;
        }
    }

    private double power(double base, int exponent) {
        double result = 1;
        for (int i = 0; i < exponent; i++) {
            result *= base;
        }
        return result;
    }

    @Override
    public double sin(double num1) {
        double result = 0;
        int sign = 1;
        num1 = Math.toRadians(num1); // Convert degrees to radians
        for (int n = 0; n < 10; n++) {
            result += sign * power(num1, 2 * n + 1) / factorial(2 * n + 1);
            sign *= -1;
        }
        return result;
    }

    @Override
    public double cos(double num1) {
        double result = 0;
        int sign = 1;
        num1 = Math.toRadians(num1); // Convert degrees to radians
        for (int n = 0; n < 10; n++) {
            result += sign * power(num1, 2 * n) / factorial(2 * n);
            sign *= -1;
        }
        return result;
    }

    @Override
    public double tan(double num1) {
        return sin(num1) / cos(num1);
    }

    @Override
    public double log(double num1, double num2) {
        return Math.log(num2) / Math.log(num1);
    }

    @Override
    public double ln(double num1) {
        if (num1 <= 0) {
            throw new ArithmeticException("Natural logarithm of non-positive number is not defined");
        }
        return Math.log(num1);
    }

    @Override
    public double ex(double num1) {
        return Math.exp(num1);
    }

    @Override
    public double square(double num1) {
        if (num1 < 0) {
            throw new ArithmeticException("Square of a negative number is not allowed");
        }
        return num1 * num1;
    }

    @Override
    public double squareRoot(double num1) {
        return Math.sqrt(num1);
    }

    @Override
    public double cube(double num1) {
        if (num1 < 0) {
            throw new ArithmeticException("Cube of a negative number is not allowed");
        }
        return num1 * num1 * num1;
    }

    public double factorial(double num1) {
        long result = 1;
        for (int i = 2; i <= num1; i++) {
            result *= i;
        }
        return result;
    }

    @Override
    public double sinInverse(double num1) {
        return Math.asin(num1);
    }

    @Override
    public double cosInverse(double num1) {
        return Math.acos(num1);
    }

    @Override
    public double tanInverse(double num1) {
        return Math.atan(num1);
    }
}

public class Javaswing {

    private JFrame frame;
    private JTextField displayField;
    private JLabel jLabel;
    private JRadioButton jRadioButton1, jRadioButton2;
    private Methods methods;
    private String lastOperator = "";
    private double lastValue = 0;
    private boolean isOn = true;

    public Javaswing() {
        methods = new Methods();

        // Frame
        frame = new JFrame();
        frame.setTitle("Scientific Calculator");
        frame.setLocation(100, 50);
        frame.setSize(500, 700);
        frame.setLayout(null); // Using null layout to set bounds explicitly

        // Set JFrame background color
        frame.getContentPane().setBackground(Color.black);

        // set jLabel
        jLabel = new JLabel("Scientific Calculator By Bhumika And Mariam ");
        jLabel.setBounds(5, 5, 600, 40);
        jLabel.setFont(new Font("Colonna MT", Font.BOLD, 23));
        jLabel.setForeground(Color.white);
        frame.add(jLabel);

        // Set Textfield
        displayField = new JTextField();
        displayField.setBounds(5, 50, 470, 55);
        frame.add(displayField);

        // Set radio button Off
        jRadioButton1 = new JRadioButton("Off");
        jRadioButton1.setBounds(150, 110, 60, 30);
        jRadioButton1.setBackground(Color.gray);
        jRadioButton1.setForeground(Color.black);
        jRadioButton1.addActionListener(new RadioButtonListener());

        // Set radio button On
        jRadioButton2 = new JRadioButton("On");
        jRadioButton2.setBounds(250, 110, 50, 30);
        jRadioButton2.setBackground(Color.gray);
        jRadioButton2.setForeground(Color.black);
        jRadioButton2.addActionListener(new RadioButtonListener());
        jRadioButton2.setSelected(true);

        ButtonGroup radioGroup = new ButtonGroup();
        radioGroup.add(jRadioButton1);
        radioGroup.add(jRadioButton2);

        frame.add(jRadioButton1);
        frame.add(jRadioButton2);

        // Buttons
        String[][] buttons = {
                {"x³", "x!", "sin⁻¹", "cos⁻¹", "tan⁻¹"},
                {"log", "ln", "e^x", "x²", "√"},
                {"sin", "cos", "tan", "(", ")"},
                {"7", "8", "9", "Del", "AC"},
                {"4", "5", "6", "*", "/"},
                {"1", "2", "3", "+", "-"},
                {"0", ".", "π", "Ans", "="}
        };
        int x = 20, y = 150, width = 80, height = 60;
        int xSpace = 10; // Adjust this value to increase/decrease horizontal space between buttons
        int ySpace = 10; // Adjust this value to increase/decrease vertical space between buttons

        for (String[] row : buttons) {
            for (String label : row) {
                JButton button = new JButton(label);
                button.setBounds(x, y, width, height);
                button.setBackground(Color.gray); // Set button background color
                button.setForeground(Color.black); // Set button text color
                button.addActionListener(new ButtonClickListener());
                frame.add(button);
                x += width + xSpace; // Increase x coordinate with space
            }
            x = 20; // Reset x coordinate for the next row
            y += height + ySpace; // Increase y coordinate with space
        }

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    private class ButtonClickListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (isOn) {
                String command = e.getActionCommand();
                switch (command) {
                    case "Del":
                        String text = displayField.getText();
                        displayField.setText(text.isEmpty() ? text : text.substring(0, text.length() - 1));
                        break;
                    case "AC":
                        displayField.setText("");
                        lastOperator = "";
                        lastValue = 0;
                        break;
                    case "=":
                        if (!lastOperator.isEmpty()) {
                            double currentValue = Double.parseDouble(displayField.getText());
                            double result = performOperation(lastValue, currentValue, lastOperator);
                            displayField.setText(String.valueOf(result));
                            lastOperator = "";
                        }
                        break;
                    case "π":
                        displayField.setText(displayField.getText() + Math.PI);
                        break;
                    default:
                        if (command.equals("sin") || command.equals("cos") || command.equals("tan") ||
                                command.equals("log") || command.equals("ln") || command.equals("e^x") ||
                                command.equals("x²") || command.equals("sqrt") || command.equals("x3") ||
                                command.equals("x!") || command.equals("sin-1") || command.equals("cos-1") ||
                                command.equals("tan-1")) {
                            lastOperator = command;
                            double currentValue = Double.parseDouble(displayField.getText());
                            double result = performOperation(currentValue, lastOperator);
                            displayField.setText(String.valueOf(result));
                        } else if ("+-*/".contains(command)) {
                            lastValue = Double.parseDouble(displayField.getText());
                            lastOperator = command;
                            displayField.setText("");
                        } else {
                            displayField.setText(displayField.getText() + command);
                        }
                        break;
                }
            }
        }
    }

    private class RadioButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            JRadioButton button = (JRadioButton) e.getSource();
            if (button.getText().equals("Off")) {
                displayField.setText("");
                displayField.setEnabled(false);
                isOn = false;
            } else {
                displayField.setEnabled(true);
                isOn = true;
            }
        }
    }

    private double performOperation(double num1, double num2, String operator){
        switch (operator) {
            case "+":
                return methods.add(num1, num2);
            case "-":
                return methods.subtract(num1, num2);
            case "*":
                return methods.multiply(num1, num2);
            case "/":
                return methods.divide(num1, num2);
            default:
                throw new UnsupportedOperationException("Invalid operator: " + operator);
        }
    }

    private double performOperation(double num, String operator) {
        switch (operator) {
            case "sin":
                return methods.sin(num);
            case "cos":
                return methods.cos(num);
            case "tan":
                return methods.tan(num);
            case "log":
                return methods.log(10, num);
            case "ln":
                return methods.ln(num);
            case "e^x":
                return methods.ex(num);
            case "x²":
                return methods.square(num);
            case "sqrt":
                return methods.squareRoot(num);
            case "x3":
                return methods.cube(num);
            case "x!":
                return methods.factorial(num);
            case "sin-1":
                return methods.sinInverse(num);
            case "cos-1":
                return methods.cosInverse(num);
            case "tan-1":
                return methods.tanInverse(num);
            default:
                throw new UnsupportedOperationException("Invalid operator: " + operator);
        }
    }

    public static void main(String[] args) {
        new Javaswing();
    }
}




// Package for function 
package Calculator;

public interface Calculator {
        double add(double num1,double num2);
        double subtract(double num1,double num2);
        double multiply(double num1,double num2);
        double divide(double num1,double num2);

        double sin(double num1);
        double cos(double num1);
        double tan(double num1);

        double sinInverse(double num1);
        double cosInverse(double num1);
        double tanInverse(double num1);
        double square(double num1);
        double cube(double num1);

        double log(double num1,double num2);
        double ln(double num1);
        double ex (double num1);
        double squareRoot(double num1);

        double factorial(double num1);
    }
